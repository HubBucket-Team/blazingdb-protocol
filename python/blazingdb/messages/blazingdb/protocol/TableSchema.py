# automatically generated by the FlatBuffers compiler, do not modify

# namespace: protocol

import flatbuffers

class TableSchema(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTableSchema(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TableSchema()
        x.Init(buf, n + offset)
        return x

    # TableSchema
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TableSchema
    def Names(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TableSchema
    def NamesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TableSchema
    def CalciteToFileIndices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # TableSchema
    def CalciteToFileIndicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TableSchema
    def Types(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # TableSchema
    def TypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TableSchema
    def NumRowGroups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # TableSchema
    def NumRowGroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TableSchema
    def Files(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TableSchema
    def FilesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TableSchema
    def CsvDelimiter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # TableSchema
    def CsvLineTerminator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # TableSchema
    def CsvSkipRows(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def TableSchemaStart(builder): builder.StartObject(8)
def TableSchemaAddNames(builder, names): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(names), 0)
def TableSchemaStartNamesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TableSchemaAddCalciteToFileIndices(builder, calciteToFileIndices): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(calciteToFileIndices), 0)
def TableSchemaStartCalciteToFileIndicesVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def TableSchemaAddTypes(builder, types): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(types), 0)
def TableSchemaStartTypesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TableSchemaAddNumRowGroups(builder, numRowGroups): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(numRowGroups), 0)
def TableSchemaStartNumRowGroupsVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def TableSchemaAddFiles(builder, files): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(files), 0)
def TableSchemaStartFilesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TableSchemaAddCsvDelimiter(builder, csvDelimiter): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(csvDelimiter), 0)
def TableSchemaAddCsvLineTerminator(builder, csvLineTerminator): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(csvLineTerminator), 0)
def TableSchemaAddCsvSkipRows(builder, csvSkipRows): builder.PrependInt32Slot(7, csvSkipRows, 0)
def TableSchemaEnd(builder): return builder.EndObject()
