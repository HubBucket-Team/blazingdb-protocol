# automatically generated by the FlatBuffers compiler, do not modify

# namespace: calcite

import flatbuffers

class DDLCreateTableRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDDLCreateTableRequest(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DDLCreateTableRequest()
        x.Init(buf, n + offset)
        return x

    # DDLCreateTableRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DDLCreateTableRequest
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # DDLCreateTableRequest
    def ColumnNames(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DDLCreateTableRequest
    def ColumnNamesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DDLCreateTableRequest
    def ColumnTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DDLCreateTableRequest
    def ColumnTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DDLCreateTableRequest
    def DbName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

def DDLCreateTableRequestStart(builder): builder.StartObject(4)
def DDLCreateTableRequestAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def DDLCreateTableRequestAddColumnNames(builder, columnNames): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(columnNames), 0)
def DDLCreateTableRequestStartColumnNamesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DDLCreateTableRequestAddColumnTypes(builder, columnTypes): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(columnTypes), 0)
def DDLCreateTableRequestStartColumnTypesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DDLCreateTableRequestAddDbName(builder, dbName): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(dbName), 0)
def DDLCreateTableRequestEnd(builder): return builder.EndObject()
