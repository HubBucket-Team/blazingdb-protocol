# automatically generated by the FlatBuffers compiler, do not modify

# namespace: interpreter

import flatbuffers

class RegisterDaskSliceRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRegisterDaskSliceRequest(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RegisterDaskSliceRequest()
        x.Init(buf, n + offset)
        return x

    # RegisterDaskSliceRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RegisterDaskSliceRequest
    def Table(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from blazingdb.messages.blazingdb.protocol.BlazingTable import BlazingTable
            obj = BlazingTable()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RegisterDaskSliceRequest
    def ResultToken(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def RegisterDaskSliceRequestStart(builder): builder.StartObject(2)
def RegisterDaskSliceRequestAddTable(builder, table): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(table), 0)
def RegisterDaskSliceRequestAddResultToken(builder, resultToken): builder.PrependUint64Slot(1, resultToken, 0)
def RegisterDaskSliceRequestEnd(builder): return builder.EndObject()
