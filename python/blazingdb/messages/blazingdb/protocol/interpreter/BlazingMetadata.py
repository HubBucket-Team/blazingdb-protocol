# automatically generated by the FlatBuffers compiler, do not modify

# namespace: interpreter

import flatbuffers

class BlazingMetadata(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBlazingMetadata(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BlazingMetadata()
        x.Init(buf, n + offset)
        return x

    # BlazingMetadata
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BlazingMetadata
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # BlazingMetadata
    def Message(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # BlazingMetadata
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # BlazingMetadata
    def Rows(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def BlazingMetadataStart(builder): builder.StartObject(4)
def BlazingMetadataAddStatus(builder, status): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(status), 0)
def BlazingMetadataAddMessage(builder, message): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(message), 0)
def BlazingMetadataAddTime(builder, time): builder.PrependFloat64Slot(2, time, 0.0)
def BlazingMetadataAddRows(builder, rows): builder.PrependInt32Slot(3, rows, 0)
def BlazingMetadataEnd(builder): return builder.EndObject()
