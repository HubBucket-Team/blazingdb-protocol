# automatically generated by the FlatBuffers compiler, do not modify

# namespace: io

import flatbuffers

class HDFS(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsHDFS(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HDFS()
        x.Init(buf, n + offset)
        return x

    # HDFS
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HDFS
    def Host(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # HDFS
    def Port(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HDFS
    def User(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # HDFS
    def DriverType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # HDFS
    def KerberosTicket(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

def HDFSStart(builder): builder.StartObject(5)
def HDFSAddHost(builder, host): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(host), 0)
def HDFSAddPort(builder, port): builder.PrependInt32Slot(1, port, 0)
def HDFSAddUser(builder, user): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(user), 0)
def HDFSAddDriverType(builder, driverType): builder.PrependInt8Slot(3, driverType, 0)
def HDFSAddKerberosTicket(builder, kerberosTicket): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(kerberosTicket), 0)
def HDFSEnd(builder): return builder.EndObject()
