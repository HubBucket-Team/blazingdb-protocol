# automatically generated by the FlatBuffers compiler, do not modify

# namespace: io

import flatbuffers

class S3(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsS3(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = S3()
        x.Init(buf, n + offset)
        return x

    # S3
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # S3
    def BucketName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # S3
    def EncryptionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # S3
    def KmsKeyAmazonResourceName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # S3
    def AccessKeyId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # S3
    def SecretKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # S3
    def SessionToken(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def S3Start(builder): builder.StartObject(6)
def S3AddBucketName(builder, bucketName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(bucketName), 0)
def S3AddEncryptionType(builder, encryptionType): builder.PrependInt8Slot(1, encryptionType, 0)
def S3AddKmsKeyAmazonResourceName(builder, kmsKeyAmazonResourceName): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(kmsKeyAmazonResourceName), 0)
def S3AddAccessKeyId(builder, accessKeyId): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(accessKeyId), 0)
def S3AddSecretKey(builder, secretKey): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(secretKey), 0)
def S3AddSessionToken(builder, sessionToken): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(sessionToken), 0)
def S3End(builder): return builder.EndObject()
